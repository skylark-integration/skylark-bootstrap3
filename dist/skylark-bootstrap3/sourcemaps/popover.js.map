{"version":3,"sources":["popover.js"],"names":["define","browser","langx","eventer","$","bs3","tooltip","Plugin","option","this","each","$this","data","options","test","Popover","Constructor","inherit","klassName","init","element","overrided","type","getDefaults","DEFAULTS","setContent","$tip","tip","title","getTitle","content","getContent","find","html","children","detach","end","removeClass","hide","hasContent","$e","$element","o","attr","call","arrow","$arrow","VERSION","mixin","fn","placement","trigger","template","old","popover","noConflict"],"mappings":";;;;;;;AAAAA,QACE,4BACA,sBACA,4BACA,0BACA,QACA,aACA,SAASC,EAAQC,EAAMC,EAAQC,EAAEC,EAAIC,GASrC,YAsEA,SAASC,GAAOC,GACd,MAAOC,MAAKC,KAAK,WACf,GAAIC,GAAUP,EAAEK,MACZG,EAAUD,EAAMC,KAAK,cACrBC,EAA2B,gBAAVL,IAAsBA,GAEtCI,GAAQ,eAAeE,KAAKN,KAC5BI,GAAMD,EAAMC,KAAK,aAAeA,EAAO,GAAIG,GAAQN,KAAMI,IACzC,gBAAVL,IAAoBI,EAAKJ,QAzExC,GAAIO,GAAUV,EAAIU,QAAUT,EAAQU,YAAYC,SAC9CC,UAAW,UAEXC,KAAO,SAASC,EAAQP,GACtBJ,KAAKY,UAAUD,EAAQP,GACvBJ,KAAKa,KAAO,WAEdC,YAAc,WACZ,MAAOR,GAAQS,UAGjBC,WAAa,WACX,GAAIC,GAAUjB,KAAKkB,MACfC,EAAUnB,KAAKoB,WACfC,EAAUrB,KAAKsB,YAEnBL,GAAKM,KAAK,kBAAkBvB,KAAKI,QAAQoB,KAAO,OAAS,QAAQL,GACjEF,EAAKM,KAAK,oBAAoBE,WAAWC,SAASC,MAChD3B,KAAKI,QAAQoB,KAA0B,gBAAXH,GAAsB,OAAS,SAAY,QACvEA,GAEFJ,EAAKW,YAAY,iCAIZX,EAAKM,KAAK,kBAAkBC,QAAQP,EAAKM,KAAK,kBAAkBM,QAGvEC,WAAa,WACX,MAAO9B,MAAKoB,YAAcpB,KAAKsB,cAGjCA,WAAa,WACX,GAAIS,GAAK/B,KAAKgC,SACVC,EAAKjC,KAAKI,OAEd,OAAO2B,GAAGG,KAAK,kBACW,kBAAbD,GAAEZ,QACPY,EAAEZ,QAAQc,KAAKJ,EAAG,IAClBE,EAAEZ,UAGZe,MAAQ,WACN,MAAQpC,MAAKqC,OAASrC,KAAKqC,QAAUrC,KAAKkB,MAAMK,KAAK,YAKzDjB,GAAQgC,QAAW,QAEnBhC,EAAQS,SAAWtB,EAAM8C,SAAU5C,EAAE6C,GAAG3C,QAAQU,YAAYQ,UAC1D0B,UAAW,QACXC,QAAS,QACTrB,QAAS,GACTsB,SAAU,yIAuBZ,IAAIC,GAAMjD,EAAE6C,GAAGK,OAcf,OAZAlD,GAAE6C,GAAGK,QAAsB/C,EAC3BH,EAAE6C,GAAGK,QAAQtC,YAAcD,EAM3BX,EAAE6C,GAAGK,QAAQC,WAAa,WAExB,MADAnD,GAAE6C,GAAGK,QAAUD,EACR5C,MAGFL,EAAE6C,GAAGK","file":"../popover.js","sourcesContent":["define([\n  \"skylark-utils-dom/browser\",\n  \"skylark-langx/langx\",\n  \"skylark-utils-dom/eventer\",\n  \"skylark-utils-dom/query\",\n  \"./bs3\",\n  \"./tooltip\" \n],function(browser,langx,eventer,$,bs3,tooltip){\n/* ========================================================================\n * Bootstrap: popover.js v3.3.7\n * http://getbootstrap.com/javascript/#popovers\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n  'use strict';\n\n  // POPOVER PUBLIC CLASS DEFINITION\n  // ===============================\n\n  var Popover = bs3.Popover = tooltip.Constructor.inherit({\n    klassName: \"Popover\",\n\n    init : function(element,options) {\n      this.overrided(element,options);\n      this.type = \"popover\";\n    },\n    getDefaults : function () {\n      return Popover.DEFAULTS\n    },\n\n    setContent : function () {\n      var $tip    = this.tip()\n      var title   = this.getTitle()\n      var content = this.getContent()\n\n      $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)\n      $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events\n        this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'\n      ](content)\n\n      $tip.removeClass('fade top bottom left right in')\n\n      // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do\n      // this manually by checking the contents.\n      if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()\n    },\n\n    hasContent : function () {\n      return this.getTitle() || this.getContent()\n    },\n\n    getContent : function () {\n      var $e = this.$element\n      var o  = this.options\n\n      return $e.attr('data-content')\n        || (typeof o.content == 'function' ?\n              o.content.call($e[0]) :\n              o.content)\n    },\n\n    arrow : function () {\n      return (this.$arrow = this.$arrow || this.tip().find('.arrow'))\n    }\n\n  });  \n\n  Popover.VERSION  = '3.3.7'\n\n  Popover.DEFAULTS = langx.mixin({}, $.fn.tooltip.Constructor.DEFAULTS, {\n    placement: 'right',\n    trigger: 'click',\n    content: '',\n    template: '<div class=\"popover\" role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-title\"></h3><div class=\"popover-content\"></div></div>'\n  })\n\n\n  // NOTE: POPOVER EXTENDS tooltip.js\n  // ================================\n\n\n  // POPOVER PLUGIN DEFINITION\n  // =========================\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.popover')\n      var options = typeof option == 'object' && option\n\n      if (!data && /destroy|hide/.test(option)) return\n      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n  var old = $.fn.popover;\n\n  $.fn.popover             = Plugin;\n  $.fn.popover.Constructor = Popover;\n\n\n  // POPOVER NO CONFLICT\n  // ===================\n\n  $.fn.popover.noConflict = function () {\n    $.fn.popover = old\n    return this\n  };\n\n  return $.fn.popover;\n});\n"]}