{"version":3,"sources":["button.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","bs3","Button","Plugin","inherit","klassName","pluginName","_construct","element","options","$el","this","$element","mixin","DEFAULTS","isLoading","closest","on","proxy","e","toggle","target","is","preventDefault","$btn","trigger","find","first","setState","state","d","val","data","resetText","setTimeout","addClass","attr","prop","removeClass","removeAttr","changed","$parent","length","$input","hasClass","toggleClass","VERSION","loadingText","register"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,uBACA,SACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAQC,GAUpD,aAKA,IAAIC,EAASD,EAAIC,OAASF,EAAQG,OAAOC,SACvCC,UAAW,SAEXC,WAAa,aAEbC,WAAa,SAASC,EAAQC,GAC5B,IAAIC,EAAMC,KAAKC,SAAYb,EAAES,GAC7BG,KAAKF,QAAYf,EAAMmB,SAAUX,EAAOY,SAAUL,GAClDE,KAAKI,WAAY,EAEbL,EAAIM,QAAQ,4BACdN,EAAIO,GAAG,2BAA2BvB,EAAMwB,MAAM,SAASC,GAGrD,GAFAR,KAAKS,UAECrB,EAAEoB,EAAEE,QAAQC,GAAG,+CAAiD,CAEpEH,EAAEI,iBAEF,IAAIC,EAAOb,KAAKC,SACZY,EAAKF,GAAG,gBACVE,EAAKC,QAAQ,SAEbD,EAAKE,KAAK,gCAAgCC,QAAQF,QAAQ,WAG9Dd,QAINiB,SAAW,SAAUC,GACnB,IAAIC,EAAO,WACPpB,EAAOC,KAAKC,SACZmB,EAAOrB,EAAIY,GAAG,SAAW,MAAQ,OACjCU,EAAOtB,EAAIsB,OAEfH,GAAS,OAEa,MAAlBG,EAAKC,WAAmBvB,EAAIsB,KAAK,YAAatB,EAAIqB,MAGtDG,WAAWxC,EAAMwB,MAAM,WACrBR,EAAIqB,GAAoB,MAAfC,EAAKH,GAAiBlB,KAAKF,QAAQoB,GAASG,EAAKH,IAE7C,eAATA,GACFlB,KAAKI,WAAY,EACjBL,EAAIyB,SAASL,GAAGM,KAAKN,EAAGA,GAAGO,KAAKP,GAAG,IAC1BnB,KAAKI,YACdJ,KAAKI,WAAY,EACjBL,EAAI4B,YAAYR,GAAGS,WAAWT,GAAGO,KAAKP,GAAG,KAE1CnB,MAAO,IAGZS,OAAS,WACP,IAAIoB,GAAU,EACVC,EAAU9B,KAAKC,SAASI,QAAQ,2BAEpC,GAAIyB,EAAQC,OAAQ,CAClB,IAAIC,EAAShC,KAAKC,SAASc,KAAK,SACL,SAAvBiB,EAAON,KAAK,SACVM,EAAON,KAAK,aAAYG,GAAU,GACtCC,EAAQf,KAAK,WAAWY,YAAY,UACpC3B,KAAKC,SAASuB,SAAS,WACS,YAAvBQ,EAAON,KAAK,UAChBM,EAAON,KAAK,aAAgB1B,KAAKC,SAASgC,SAAS,YAAWJ,GAAU,GAC7E7B,KAAKC,SAASiC,YAAY,WAE5BF,EAAON,KAAK,UAAW1B,KAAKC,SAASgC,SAAS,WAC1CJ,GAASG,EAAOlB,QAAQ,eAE5Bd,KAAKC,SAASwB,KAAK,gBAAiBzB,KAAKC,SAASgC,SAAS,WAC3DjC,KAAKC,SAASiC,YAAY,aA+DhC,OAzDA3C,EAAO4C,QAAW,QAElB5C,EAAOY,UACLiC,YAAa,cA6Cf/C,EAAQgD,SAAS9C,EAAO,SAAS,SAASO,GAEvB,UAAXA,EACFE,KAAKS,SACIX,GACTE,KAAKiB,SAASnB,KAIbP","file":"../button.js","sourcesContent":["define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins\",\n  \"./bs3\"\n],function(langx,browser,eventer,noder,geom,$,plugins,bs3){\n\n/* ========================================================================\n * Bootstrap: button.js v3.3.7\n * http://getbootstrap.com/javascript/#buttons\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n  'use strict';\n\n  // BUTTON PUBLIC CLASS DEFINITION\n  // ==============================\n\n  var Button = bs3.Button = plugins.Plugin.inherit({\n    klassName: \"Button\",\n\n    pluginName : \"bs3.button\",\n\n    _construct : function(element,options) {\n      var $el = this.$element  = $(element)\n      this.options   = langx.mixin({}, Button.DEFAULTS, options)\n      this.isLoading = false\n\n      if ($el.closest('[data-toggle^=\"button\"]')) {\n        $el.on(\"click.bs.button.data-api\",langx.proxy(function(e){\n          this.toggle()\n\n          if (!($(e.target).is('input[type=\"radio\"], input[type=\"checkbox\"]'))) {\n            // Prevent double click on radios, and the double selections (so cancellation) on checkboxes\n            e.preventDefault()\n            // The target component still receive the focus\n            var $btn = this.$element; \n            if ($btn.is('input,button')) {\n              $btn.trigger('focus');\n            } else {\n              $btn.find('input:visible,button:visible').first().trigger('focus');\n            }\n          }\n        },this));\n      }\n    },\n\n    setState : function (state) {\n      var d    = 'disabled'\n      var $el  = this.$element\n      var val  = $el.is('input') ? 'val' : 'html'\n      var data = $el.data()\n\n      state += 'Text'\n\n      if (data.resetText == null) $el.data('resetText', $el[val]())\n\n      // push to event loop to allow forms to submit\n      setTimeout(langx.proxy(function () {\n        $el[val](data[state] == null ? this.options[state] : data[state])\n\n        if (state == 'loadingText') {\n          this.isLoading = true\n          $el.addClass(d).attr(d, d).prop(d, true)\n        } else if (this.isLoading) {\n          this.isLoading = false\n          $el.removeClass(d).removeAttr(d).prop(d, false)\n        }\n      }, this), 0)\n    },\n\n    toggle : function () {\n      var changed = true\n      var $parent = this.$element.closest('[data-toggle=\"buttons\"]')\n\n      if ($parent.length) {\n        var $input = this.$element.find('input')\n        if ($input.prop('type') == 'radio') {\n          if ($input.prop('checked')) changed = false\n          $parent.find('.active').removeClass('active')\n          this.$element.addClass('active')\n        } else if ($input.prop('type') == 'checkbox') {\n          if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false\n          this.$element.toggleClass('active')\n        }\n        $input.prop('checked', this.$element.hasClass('active'))\n        if (changed) $input.trigger('change')\n      } else {\n        this.$element.attr('aria-pressed', !this.$element.hasClass('active'))\n        this.$element.toggleClass('active')\n      }\n    }\n\n  });  \n\n  Button.VERSION  = '3.3.7'\n\n  Button.DEFAULTS = {\n    loadingText: 'loading...'\n  }\n\n\n\n  // BUTTON PLUGIN DEFINITION\n  // ========================\n  /*\n\n  function Plugin(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var wgt    = $this.data('bs.button')\n      var options = typeof option == 'object' && option\n\n      if (!wgt) {\n        $this.data('bs.button', (wgt = new Button(this, options)));\n      }\n\n      if (option == 'toggle') {\n        wgt.toggle();\n      } else if (option) {\n        wgt.setState(option);\n      }\n    });\n  }\n\n  var old = $.fn.button;\n\n  $.fn.button             = Plugin;\n  $.fn.button.Constructor = Button;\n\n\n  // BUTTON NO CONFLICT\n  // ==================\n\n  $.fn.button.noConflict = function () {\n    $.fn.button = old;\n    return this;\n  }\n\n\n  return $.fn.button;\n  */\n\n  plugins.register(Button,\"button\",function(options){\n      //this -> plugin instance\n      if (options == 'toggle') {\n        this.toggle();\n      } else if (options) {\n        this.setState(options);\n      }    \n  });\n\n  return Button;\n});\n"]}